$ valgrind --leak-check=full --show-leak-kinds=all -s ./target/release/examples/cat <<<$(echo test)
==603916== Memcheck, a memory error detector
==603916== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==603916== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==603916== Command: ./target/release/examples/cat
==603916==
test
==603916==
==603916== HEAP SUMMARY:
==603916==     in use at exit: 8,192 bytes in 1 blocks
==603916==   total heap usage: 14 allocs, 13 frees, 19,597 bytes allocated
==603916==
==603916== 8,192 bytes in 1 blocks are still reachable in loss record 1 of 1
==603916==    at 0x4841848: malloc (vg_replace_malloc.c:431)
==603916==    by 0x10F92F: alloc (alloc.rs:102)
==603916==    by 0x10F92F: alloc_impl (alloc.rs:185)
==603916==    by 0x10F92F: allocate (alloc.rs:245)
==603916==    by 0x10F92F: allocate_in<u8, alloc::alloc::Global> (raw_vec.rs:184)
==603916==    by 0x10F92F: with_capacity_in<u8, alloc::alloc::Global> (raw_vec.rs:130)
==603916==    by 0x10F92F: with_capacity<u8> (raw_vec.rs:92)
==603916==    by 0x10F92F: new_uninit_slice<u8> (boxed.rs:627)
==603916==    by 0x10F92F: with_capacity (buffer.rs:34)
==603916==    by 0x10F92F: with_capacity<std::io::stdio::StdinRaw> (bufreader.rs:94)
==603916==    by 0x10F92F: {closure#0} (stdio.rs:326)
==603916==    by 0x10F92F: {closure#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::io::stdio::stdin::{closure_env#0}> (once_lock.rs:170)
==603916==    by 0x10F92F: {closure#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::sync::once_lock::{impl#0}::get_or_init::{closure_env#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::io::stdio::stdin::{closure_env#0}>, !> (once_lock.rs:296)
==603916==    by 0x10F92F: {closure#0}<std::sync::once_lock::{impl#0}::initialize::{closure_env#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::sync::once_lock::{impl#0}::get_or_init::{closure_env#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::io::stdio::stdin::{closure_env#0}>, !>> (once.rs:208)
==603916==    by 0x10F92F: std::sys_common::once::futex::Once::call (futex.rs:124)
==603916==    by 0x10EFED: call_once_force<std::sync::once_lock::{impl#0}::initialize::{closure_env#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::sync::once_lock::{impl#0}::get_or_init::{closure_env#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::io::stdio::stdin::{closure_env#0}>, !>> (once.rs:208)
==603916==    by 0x10EFED: std::sync::once_lock::OnceLock<T>::initialize (once_lock.rs:295)
==603916==    by 0x127FE9: get_or_try_init<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::sync::once_lock::{impl#0}::get_or_init::{closure_env#0}<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::io::stdio::stdin::{closure_env#0}>, !> (once_lock.rs:218)
==603916==    by 0x127FE9: get_or_init<std::sync::mutex::Mutex<std::io::buffered::bufreader::BufReader<std::io::stdio::StdinRaw>>, std::io::stdio::stdin::{closure_env#0}> (once_lock.rs:170)
==603916==    by 0x127FE9: std::io::stdio::stdin (stdio.rs:325)
==603916==    by 0x111053: cat::main (in /home/xsx/git/rust/target/release/examples/cat)
==603916==    by 0x111FF2: std::sys_common::backtrace::__rust_begin_short_backtrace (in /home/xsx/git/rust/target/release/examples/cat)
==603916==    by 0x110C3C: std::rt::lang_start::{{closure}} (in /home/xsx/git/rust/target/release/examples/cat)
==603916==    by 0x126261: call_once<(), (dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (function.rs:284)
==603916==    by 0x126261: do_call<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panicking.rs:500)
==603916==    by 0x126261: try<i32, &(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe)> (panicking.rs:464)
==603916==    by 0x126261: catch_unwind<&(dyn core::ops::function::Fn<(), Output=i32> + core::marker::Sync + core::panic::unwind_safe::RefUnwindSafe), i32> (panic.rs:142)
==603916==    by 0x126261: {closure#2} (rt.rs:148)
==603916==    by 0x126261: do_call<std::rt::lang_start_internal::{closure_env#2}, isize> (panicking.rs:500)
==603916==    by 0x126261: try<isize, std::rt::lang_start_internal::{closure_env#2}> (panicking.rs:464)
==603916==    by 0x126261: catch_unwind<std::rt::lang_start_internal::{closure_env#2}, isize> (panic.rs:142)
==603916==    by 0x126261: std::rt::lang_start_internal (rt.rs:148)
==603916==    by 0x1113B4: main (in /home/xsx/git/rust/target/release/examples/cat)
==603916==
==603916== LEAK SUMMARY:
==603916==    definitely lost: 0 bytes in 0 blocks
==603916==    indirectly lost: 0 bytes in 0 blocks
==603916==      possibly lost: 0 bytes in 0 blocks
==603916==    still reachable: 8,192 bytes in 1 blocks
==603916==         suppressed: 0 bytes in 0 blocks
==603916==
==603916== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
